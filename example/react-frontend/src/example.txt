import React, { useState, useEffect, type JSX } from "react";
import axios from "axios";

// Interfaces permanecem inalteradas
interface Order {
  out_trade_no: string;
  amount: string;
  status: string;
  created_at: string;
  payment_method: string;
  phone_num?: string;
  subject?: string;
}

interface Refund {
  refund_id: string;
  amount: string;
  status: string;
  out_trade_no: string;
}

interface Card {
  out_trade_no: string;
  amount: string;
  status: string;
  bank_card_no: string;
}

interface PaymentResponse {
  success: boolean;
  dynamic_link?: string;
  trade_token?: string;
  out_trade_no: string;
  inner_trade_no: string;
  total_amount: number;
  return_url: string;
  error?: string;
}

interface ListResponse {
  order: Order[];
  refund: Refund[];
  card: Card[];
}

const App: React.FC = () => {
  const [amount, setAmount] = useState("50.00");
  const [paymentMethod, setPaymentMethod] = useState<
    "QR_CODE" | "MULTICAIXA_EXPRESS"
  >("QR_CODE");
  const [phoneNum, setPhoneNum] = useState("");
  const [lists, setLists] = useState<ListResponse>({
    order: [],
    refund: [],
    card: [],
  });
  const [modalContent, setModalContent] = useState<JSX.Element | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const BASE_URL = "https://paypay-backend.vercel.app";

  // Funções (getData, create, closeOrder, refundOrder, orderDetail, paymentToCard) permanecem inalteradas
  const getData = async () => {
    try {
      const response = await axios.get<ListResponse>(`${BASE_URL}/api/list`);
      setLists(response.data);
    } catch (err) {
      setError("Erro ao carregar dados.");
      console.error(err);
    }
  };

  useEffect(() => {
    getData();
  }, []);

  const create = async () => {
    if (!window.confirm("Criar pedido?")) return;
    setLoading(true);
    setError(null);

    const payload = {
      total_amount: amount,
      paymentMethod,
      ...(paymentMethod === "MULTICAIXA_EXPRESS" && { phone_num: phoneNum }),
    };

    try {
      const response = await axios.post<PaymentResponse>(
        `${BASE_URL}/api/create`,
        payload
      );
      if (response.data.success) {
        if (paymentMethod === "QR_CODE" && response.data.dynamic_link) {
          const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(
            response.data.dynamic_link
          )}`;
          setModalContent(
            <img src={qrUrl} alt="QR Code" className="w-40 h-40" />
          );
        } else if (paymentMethod === "MULTICAIXA_EXPRESS") {
          setModalContent(
            <p>
              Pagamento de {response.data.total_amount} AOA iniciado. Autorize
              no app MULTICAIXA Express no número {phoneNum} em até 90 segundos.
            </p>
          );
        }
        getData();
      } else {
        setModalContent(<p className="text-red-600">{response.data.error}</p>);
      }
    } catch (err) {
      setModalContent(
        <p className="text-red-600">Erro ao criar pedido: {String(err)}</p>
      );
    } finally {
      setLoading(false);
    }
  };

  const closeOrder = async (id: string) => {
    if (!window.confirm(`Fechar pedido: ${id}?`)) return;
    try {
      const response = await axios.get(`${BASE_URL}/api/close?id=${id}`);
      if (response.data === "true") {
        setTimeout(getData, 5000);
      } else {
        setModalContent(<p>Erro ao fechar pedido: {response.data.error}</p>);
      }
    } catch (err) {
      setModalContent(<p>Erro ao fechar pedido: {String(err)}</p>);
    }
  };

  const refundOrder = async (id: string) => {
    if (!window.confirm(`Reembolsar pedido: ${id}?`)) return;
    try {
      const response = await axios.get(`${BASE_URL}/api/refund?id=${id}`);
      if (response.data === "true") {
        setTimeout(getData, 5000);
      } else {
        setModalContent(<p>Erro ao reembolsar: {response.data.error}</p>);
      }
    } catch (err) {
      setModalContent(<p>Erro ao reembolsar: {String(err)}</p>);
    }
  };

  const orderDetail = async (id: string) => {
    try {
      const response = await axios.get(`${BASE_URL}/api/fetch?id=${id}`);
      setModalContent(
        <pre className="text-sm break-all text-gray-900">
          {JSON.stringify(response.data, null, 2)}
        </pre>
      );
    } catch (err) {
      setModalContent(
        <p className="text-red-600">
          Erro ao consultar detalhes: {String(err)}
        </p>
      );
    }
  };

  const paymentToCard = async () => {
    if (!window.confirm("Realizar transferência para cartão?")) return;
    try {
      const response = await axios.post(`${BASE_URL}/api/card`, {
        amount: amount,
        bank_card_no: "AO06005500000000000000001",
        bank_code: "BPA",
        bank_account_name: "Test",
      });
      if (response.data === "true") {
        getData();
      } else {
        setModalContent(
          <p className="text-red-600">
            Erro na transferência: {response.data.error}
          </p>
        );
      }
    } catch (err) {
      setModalContent(
        <p className="text-red-600">Erro na transferência: {String(err)}</p>
      );
    }
  };

  // Funções de renderização de tabelas permanecem inalteradas
  const renderOrderTable = (orders: Order[]) => (
    <table className="w-full border-collapse border border-gray-300">
      <thead>
        <tr className="bg-gray-200">
          <th className="border border-gray-300 p-2 text-gray-900">ID</th>
          <th className="border border-gray-300 p-2 text-gray-900">Valor</th>
          <th className="border border-gray-300 p-2 text-gray-900">Status</th>
          <th className="border border-gray-300 p-2 text-gray-900">Data</th>
          <th className="border border-gray-300 p-2 text-gray-900">Ação</th>
        </tr>
      </thead>
      <tbody>
        {orders.map((order) => (
          <tr key={order.out_trade_no}>
            <td className="border border-gray-300 p-2 text-gray-900">
              {order.out_trade_no}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {order.out_trade_no}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {order.status}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {order.created_at}
            </td>
            <td className="border border-gray-300 p-2">
              {order.status === "PENDING" && (
                <button
                  onClick={() => closeOrder(order.out_trade_no)}
                  className="text-blue-600 hover:underline mr-2"
                >
                  Fechar
                </button>
              )}
              {order.status === "PAID" && (
                <button
                  onClick={() => refundOrder(order.out_trade_no)}
                  className="text-blue-600 hover:underline mr-2"
                >
                  Reembolsar
                </button>
              )}
              <button
                onClick={() => orderDetail(order.out_trade_no)}
                className="text-blue-600 hover:underline"
              >
                Detalhes
              </button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );

  const renderRefundTable = (refunds: Refund[]) => (
    <table className="w-full border-collapse border border-gray-300">
      <thead>
        <tr className="bg-gray-200">
          <th className="border border-gray-300 p-2 text-gray-900">ID</th>
          <th className="border border-gray-300 p-2 text-gray-900">Valor</th>
          <th className="border border-gray-300 p-2 text-gray-900">Status</th>
          <th className="border border-gray-300 p-2 text-gray-900">
            ID do Pedido
          </th>
        </tr>
      </thead>
      <tbody>
        {refunds.map((refund) => (
          <tr key={refund.refund_id}>
            <td className="border border-gray-300 p-2 text-gray-900">
              {refund.refund_id}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {refund.amount}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {refund.status}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {refund.out_trade_no}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );

  const renderCardTable = (cards: Card[]) => (
    <table className="w-full border-collapse border border-gray-300">
      <thead>
        <tr className="bg-gray-200">
          <th className="border border-gray-300 p-2 text-gray-900">ID</th>
          <th className="border border-gray-300 p-2 text-gray-900">Valor</th>
          <th className="border border-gray-300 p-2 text-gray-900">Status</th>
          <th className="border border-gray-300 p-2 text-gray-900">IBAN</th>
        </tr>
      </thead>
      <tbody>
        {cards.map((card) => (
          <tr key={card.out_trade_no}>
            <td className="border border-gray-300 p-2 text-gray-900">
              {card.out_trade_no}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {card.amount}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {card.status}
            </td>
            <td className="border border-gray-300 p-2 text-gray-900">
              {card.bank_card_no}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-2xl font-bold text-center text-blue-700 mb-4">
          Checkout - Agua Rosada Tecnologia
        </h1>
        <div className="flex gap-4 mb-6">
          <button
            onClick={create}
            disabled={loading}
            className={`px-4 py-2 rounded font-semibold text-white ${
              loading ? "bg-gray-400" : "bg-blue-600 hover:bg-blue-700"
            }`}
          >
            Criar Pedido
          </button>
          <button
            onClick={getData}
            disabled={loading}
            className={`px-4 py-2 rounded font-semibold text-white ${
              loading ? "bg-gray-400" : "bg-green-600 hover:bg-green-700"
            }`}
          >
            Atualizar
          </button>
          <button
            onClick={paymentToCard}
            disabled={loading}
            className={`px-4 py-2 rounded font-semibold text-white ${
              loading ? "bg-gray-400" : "bg-purple-600 hover:bg-purple-700"
            }`}
          >
            Pagamento para Cartão
          </button>
        </div>

        <div className="mb-6">
          <label className="block font-medium text-gray-900 mb-1">
            Método de Pagamento:
          </label>
          <select
            className="w-full border rounded px-3 py-2 mb-2 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={paymentMethod}
            onChange={(e) =>
              setPaymentMethod(
                e.target.value as "QR_CODE" | "MULTICAIXA_EXPRESS"
              )
            }
          >
            <option value="QR_CODE">QR Code</option>
            <option value="MULTICAIXA_EXPRESS">MULTICAIXA Express</option>
          </select>
          <label className="block font-medium text-gray-900 mb-1">
            Valor (AOA):
          </label>
          <input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            min="0.01"
            step="0.01"
            disabled={loading}
            className="w-full border rounded px-3 py-2 mb-2 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          {paymentMethod === "MULTICAIXA_EXPRESS" && (
            <>
              <label className="block font-medium text-gray-900 mb-1">
                Número de Telefone:
              </label>
              <input
                type="text"
                value={phoneNum}
                onChange={(e) => setPhoneNum(e.target.value)}
                placeholder="912345678"
                maxLength={9}
                disabled={loading}
                className="w-full border rounded px-3 py-2 bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </>
          )}
        </div>

        {error && <p className="text-red-600 mb-4">{error}</p>}

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <h3 className="text-lg font-semibold mb-2 text-gray-900">
              Pedidos
            </h3>
            {renderOrderTable(lists.order)}
          </div>
          <div>
            <h3 className="text-lg font-semibold mb-2 text-gray-900">
              Reembolsos
            </h3>
            {renderRefundTable(lists.refund)}
          </div>
          <div>
            <h3 className="text-lg font-semibold mb-2 text-gray-900">
              Pagamentos para Cartão
            </h3>
            {renderCardTable(lists.card)}
          </div>
        </div>

        {modalContent && (
          <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[500px] h-[600px] bg-white border-2 border-red-500 p-4 rounded shadow-lg">
            <button
              onClick={() => setModalContent(null)}
              className="mb-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
              Fechar
            </button>
            <div className="overflow-auto text-gray-900">{modalContent}</div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
  const BASE_URL = "http://localhost:3000";
